Return-Path: <owner-linux-mm@kvack.org>
Received: from psmtp.com (na3sys010amx191.postini.com [74.125.245.191])
	by kanga.kvack.org (Postfix) with SMTP id 1A9CB6B005A
	for <linux-mm@kvack.org>; Thu, 26 Jan 2012 09:14:44 -0500 (EST)
Message-ID: <4F215FCE.8010209@hitachi.com>
Date: Thu, 26 Jan 2012 23:14:38 +0900
From: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
MIME-Version: 1.0
Subject: Re: [PATCH v9 3.2 1/9] uprobes: Install and remove breakpoints.
References: <20120110114821.17610.9188.sendpatchset@srdronam.in.ibm.com> <20120110114831.17610.88468.sendpatchset@srdronam.in.ibm.com> <CAK1hOcO3pz+zBLQKfdty3UwQG8zxXwBWo9euFaE+zKawiqTE2g@mail.gmail.com> <CAK1hOcMeYDrLpgbyQXFAkrqk3Le-rLkoVwCN3wjkT61YJg0G6Q@mail.gmail.com>
In-Reply-To: <CAK1hOcMeYDrLpgbyQXFAkrqk3Le-rLkoVwCN3wjkT61YJg0G6Q@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Sender: owner-linux-mm@kvack.org
List-ID: <linux-mm.kvack.org>
To: Denys Vlasenko <vda.linux@googlemail.com>
Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>, Peter Zijlstra <peterz@infradead.org>, Linus Torvalds <torvalds@linux-foundation.org>, Oleg Nesterov <oleg@redhat.com>, Ingo Molnar <mingo@elte.hu>, Andrew Morton <akpm@linux-foundation.org>, LKML <linux-kernel@vger.kernel.org>, Linux-mm <linux-mm@kvack.org>, Andi Kleen <andi@firstfloor.org>, Christoph Hellwig <hch@infradead.org>, Steven Rostedt <rostedt@goodmis.org>, Roland McGrath <roland@hack.frob.com>, Thomas Gleixner <tglx@linutronix.de>, Arnaldo Carvalho de Melo <acme@infradead.org>, Anton Arapov <anton@redhat.com>, Ananth N Mavinakayanahalli <ananth@in.ibm.com>, Jim Keniston <jkenisto@linux.vnet.ibm.com>, Stephen Rothwell <sfr@canb.auug.org.au>, yrl.pp-manager.tt@hitachi.com

(2012/01/26 0:32), Denys Vlasenko wrote:
> On Wed, Jan 25, 2012 at 4:13 PM, Denys Vlasenko
> <vda.linux@googlemail.com> wrote:
>>> +       /*
>>> +        * Convert from rip-relative addressing to indirect addressing
>>> +        * via a scratch register.  Change the r/m field from 0x5 (%rip)
>>> +        * to 0x0 (%rax) or 0x1 (%rcx), and squeeze out the offset field.
>>> +        */
>>> +       reg = MODRM_REG(insn);
>>> +       if (reg == 0) {
>>> +               /*
>>> +                * The register operand (if any) is either the A register
>>> +                * (%rax, %eax, etc.) or (if the 0x4 bit is set in the
>>> +                * REX prefix) %r8.  In any case, we know the C register
>>> +                * is NOT the register operand, so we use %rcx (register
>>> +                * #1) for the scratch register.
>>> +                */
>>> +               uprobe->arch_info.fixups = UPROBES_FIX_RIP_CX;
>>> +               /* Change modrm from 00 000 101 to 00 000 001. */
>>> +               *cursor = 0x1;
> 
> Hmm. I think we have a bug here.
> 
> What if this instruction has REX.B = 1? Granted, REX.B = 1 has no effect on
> rip-relative addressing and therefore normally won't be generated by gcc/as,
> but still. If you replace md and r/m fields as above, you are trying to convert
> 0x12345678(%rip) reference to (%rcx), but if REX.B = 1, then you in fact
> converted it to (%r9)!

Right, thanks for finding :)
And %rax register reference encoding has same problem, doesn't it?

Thank you,

-- 
Masami HIRAMATSU
Software Platform Research Dept. Linux Technology Center
Hitachi, Ltd., Yokohama Research Laboratory
E-mail: masami.hiramatsu.pt@hitachi.com

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Fight unfair telecom internet charges in Canada: sign http://stopthemeter.ca/
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>
