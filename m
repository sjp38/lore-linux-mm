Return-Path: <owner-linux-mm@kvack.org>
Received: from psmtp.com (na3sys010amx122.postini.com [74.125.245.122])
	by kanga.kvack.org (Postfix) with SMTP id CCFF16B0083
	for <linux-mm@kvack.org>; Tue, 14 May 2013 12:43:16 -0400 (EDT)
Date: Tue, 14 May 2013 12:42:55 -0400
From: Vivek Goyal <vgoyal@redhat.com>
Subject: Re: [PATCH v5 6/8] vmcore: treat memory chunks referenced by PT_LOAD
 program header entries in page-size boundary in vmcore_list
Message-ID: <20130514164255.GI13674@redhat.com>
References: <20130514015622.18697.77191.stgit@localhost6.localdomain6>
 <20130514015740.18697.67638.stgit@localhost6.localdomain6>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20130514015740.18697.67638.stgit@localhost6.localdomain6>
Sender: owner-linux-mm@kvack.org
List-ID: <linux-mm.kvack.org>
To: HATAYAMA Daisuke <d.hatayama@jp.fujitsu.com>
Cc: ebiederm@xmission.com, akpm@linux-foundation.org, cpw@sgi.com, kumagai-atsushi@mxc.nes.nec.co.jp, lisa.mitchell@hp.com, kexec@lists.infradead.org, linux-kernel@vger.kernel.org, zhangyanfei@cn.fujitsu.com, jingbai.ma@hp.com, linux-mm@kvack.org

On Tue, May 14, 2013 at 10:57:40AM +0900, HATAYAMA Daisuke wrote:
> Treat memory chunks referenced by PT_LOAD program header entries in
> page-size boundary in vmcore_list. Formally, for each range [start,
> end], we set up the corresponding vmcore object in vmcore_list to
> [rounddown(start, PAGE_SIZE), roundup(end, PAGE_SIZE)].
> 
> This change affects layout of /proc/vmcore. The gaps generated by the
> rearrangement are newly made visible to applications as
> holes. Concretely, they are two ranges [rounddown(start, PAGE_SIZE),
> start] and [end, roundup(end, PAGE_SIZE)].
> 
> Suppose variable m points at a vmcore object in vmcore_list, and
> variable phdr points at the program header of PT_LOAD type the
> variable m corresponds to. Then, pictorially:
> 
>   m->offset                    +---------------+
>                                | hole          |
> phdr->p_offset =               +---------------+
>   m->offset + (paddr - start)  |               |\
>                                | kernel memory | phdr->p_memsz
>                                |               |/
>                                +---------------+
>                                | hole          |
>   m->offset + m->size          +---------------+
> 
> where m->offset and m->offset + m->size are always page-size aligned.
> 
> Signed-off-by: HATAYAMA Daisuke <d.hatayama@jp.fujitsu.com>

Looks good to me. I think this patch could be higher up in the series.

Acked-by: Vivek Goyal <vgoyal@redhat.com>

Vivek

> ---
> 
>  fs/proc/vmcore.c |   30 ++++++++++++++++++++++--------
>  1 files changed, 22 insertions(+), 8 deletions(-)
> 
> diff --git a/fs/proc/vmcore.c b/fs/proc/vmcore.c
> index 795efd2..eb7ff29 100644
> --- a/fs/proc/vmcore.c
> +++ b/fs/proc/vmcore.c
> @@ -504,20 +504,27 @@ static int __init process_ptload_program_headers_elf64(char *elfptr,
>  	vmcore_off = elfsz + elfnotesegsz;
>  
>  	for (i = 0; i < ehdr_ptr->e_phnum; i++, phdr_ptr++) {
> +		u64 paddr, start, end, size;
> +
>  		if (phdr_ptr->p_type != PT_LOAD)
>  			continue;
>  
> +		paddr = phdr_ptr->p_offset;
> +		start = rounddown(paddr, PAGE_SIZE);
> +		end = roundup(paddr + phdr_ptr->p_memsz, PAGE_SIZE);
> +		size = end - start;
> +
>  		/* Add this contiguous chunk of memory to vmcore list.*/
>  		new = get_new_element();
>  		if (!new)
>  			return -ENOMEM;
> -		new->paddr = phdr_ptr->p_offset;
> -		new->size = phdr_ptr->p_memsz;
> +		new->paddr = start;
> +		new->size = size;
>  		list_add_tail(&new->list, vc_list);
>  
>  		/* Update the program header offset. */
> -		phdr_ptr->p_offset = vmcore_off;
> -		vmcore_off = vmcore_off + phdr_ptr->p_memsz;
> +		phdr_ptr->p_offset = vmcore_off + (paddr - start);
> +		vmcore_off = vmcore_off + size;
>  	}
>  	return 0;
>  }
> @@ -540,20 +547,27 @@ static int __init process_ptload_program_headers_elf32(char *elfptr,
>  	vmcore_off = elfsz + elfnotesegsz;
>  
>  	for (i = 0; i < ehdr_ptr->e_phnum; i++, phdr_ptr++) {
> +		u64 paddr, start, end, size;
> +
>  		if (phdr_ptr->p_type != PT_LOAD)
>  			continue;
>  
> +		paddr = phdr_ptr->p_offset;
> +		start = rounddown(paddr, PAGE_SIZE);
> +		end = roundup(paddr + phdr_ptr->p_memsz, PAGE_SIZE);
> +		size = end - start;
> +
>  		/* Add this contiguous chunk of memory to vmcore list.*/
>  		new = get_new_element();
>  		if (!new)
>  			return -ENOMEM;
> -		new->paddr = phdr_ptr->p_offset;
> -		new->size = phdr_ptr->p_memsz;
> +		new->paddr = start;
> +		new->size = size;
>  		list_add_tail(&new->list, vc_list);
>  
>  		/* Update the program header offset */
> -		phdr_ptr->p_offset = vmcore_off;
> -		vmcore_off = vmcore_off + phdr_ptr->p_memsz;
> +		phdr_ptr->p_offset = vmcore_off + (paddr - start);
> +		vmcore_off = vmcore_off + size;
>  	}
>  	return 0;
>  }

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>
