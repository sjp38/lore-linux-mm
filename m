Return-Path: <owner-linux-mm@kvack.org>
Received: from mail-pf0-f197.google.com (mail-pf0-f197.google.com [209.85.192.197])
	by kanga.kvack.org (Postfix) with ESMTP id 1DC8D6B0038
	for <linux-mm@kvack.org>; Wed,  1 Mar 2017 00:43:39 -0500 (EST)
Received: by mail-pf0-f197.google.com with SMTP id j5so37776068pfb.3
        for <linux-mm@kvack.org>; Tue, 28 Feb 2017 21:43:39 -0800 (PST)
Received: from lgeamrelo12.lge.com (LGEAMRELO12.lge.com. [156.147.23.52])
        by mx.google.com with ESMTP id w15si3659850pge.367.2017.02.28.21.43.37
        for <linux-mm@kvack.org>;
        Tue, 28 Feb 2017 21:43:38 -0800 (PST)
Date: Wed, 1 Mar 2017 14:43:23 +0900
From: Byungchul Park <byungchul.park@lge.com>
Subject: Re: [PATCH v5 06/13] lockdep: Implement crossrelease feature
Message-ID: <20170301054323.GE11663@X58A-UD3R>
References: <1484745459-2055-1-git-send-email-byungchul.park@lge.com>
 <1484745459-2055-7-git-send-email-byungchul.park@lge.com>
 <20170228134018.GK5680@worktop>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20170228134018.GK5680@worktop>
Sender: owner-linux-mm@kvack.org
List-ID: <linux-mm.kvack.org>
To: Peter Zijlstra <peterz@infradead.org>
Cc: mingo@kernel.org, tglx@linutronix.de, walken@google.com, boqun.feng@gmail.com, kirill@shutemov.name, linux-kernel@vger.kernel.org, linux-mm@kvack.org, iamjoonsoo.kim@lge.com, akpm@linux-foundation.org, npiggin@gmail.com, kernel-team@lge.com

On Tue, Feb 28, 2017 at 02:40:18PM +0100, Peter Zijlstra wrote:
> > +static int commit_xhlocks(struct cross_lock *xlock)
> > +{
> > +	struct task_struct *curr = current;
> > +	struct hist_lock *xhlock_c = xhlock_curr(curr);
> > +	struct hist_lock *xhlock = xhlock_c;
> > +
> > +	do {
> > +		xhlock = xhlock_prev(curr, xhlock);
> > +
> > +		if (!xhlock_used(xhlock))
> > +			break;
> > +
> > +		if (before(xhlock->hlock.gen_id, xlock->hlock.gen_id))
> > +			break;
> > +
> > +		if (same_context_xhlock(xhlock) &&
> > +		    before(xhlock->prev_gen_id, xlock->hlock.gen_id) &&
> > +		    !commit_xhlock(xlock, xhlock))
> > +			return 0;
> > +	} while (xhlock_c != xhlock);
> > +
> > +	return 1;
> > +}
> 
> So I'm still struggling with prev_gen_id; is it an optimization or is it
> required for correctness?

It's an optimization, but very essential and important optimization.

          in hlocks[]
          ------------
          A gen_id (4) --+
                         | previous gen_id
          B gen_id (3) <-+
          C gen_id (3)
          D gen_id (2)
oldest -> E gen_id (1)

          in xhlocks[]
          ------------
       ^  A gen_id (4) prev_gen_id (3: B's gen id)
       |  B gen_id (3) prev_gen_id (3: C's gen id)
       |  C gen_id (3) prev_gen_id (2: D's gen id)
       |  D gen_id (2) prev_gen_id (1: E's gen id)
       |  E gen_id (1) prev_gen_id (NA)

Let's consider the case that the gen id of xlock to commit is 3.

In this case, it's engough to generate 'the xlock -> C'. 'the xlock -> B'
and 'the xlock -> A' are unnecessary since it's covered by 'C -> B' and
'B -> A' which are already generated by original lockdep.

I use the prev_gen_id to avoid adding this kind of redundant
dependencies. In other words, xhlock->prev_gen_id >= xlock->hlock.gen_id
means that the previous lock in hlocks[] is able to handle the
dependency on its commit stage.

--
To unsubscribe, send a message with 'unsubscribe linux-mm' in
the body to majordomo@kvack.org.  For more info on Linux MM,
see: http://www.linux-mm.org/ .
Don't email: <a href=mailto:"dont@kvack.org"> email@kvack.org </a>
